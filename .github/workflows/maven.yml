# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: currencyservice-github-action

on:
  workflow_dispatch:
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron: '30 17 * * *'

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_ACCOUNT_KEY: ${{ secrets.SERVICE_ACCOUNT_KEY }}
  GKE_CLUSTER_NAME: ${{ secrets.GKE_CLUSTER_NAME }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}

  DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
  DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}


jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{env.DOCKER_USERNAME}}
          password: ${{env.DOCKER_PASSWORD}}

      - name: Maven Clean, Install, Docker Build, Push and SonarCloud
        run: mvn -B clean install -P build-push,sonar --file pom.xml

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
          service_account_key: ${{ env.SERVICE_ACCOUNT_KEY }}
          export_default_credentials: true

      - name: Use gcloud CLI
        run: gcloud info

      # Get the GKE credentials so we can deploy to the cluster
      - name: Get the GKE credentials
        run: |-
          gcloud container clusters get-credentials "$GKE_CLUSTER_NAME" --zone "$GKE_ZONE"

      # Deploy Currency Service images to the GKE cluster
      - name: Deployment to the GKE Cluster
        run: |-
          echo "Delete exiting EFK setup"
          kubectl delete namespace elastic-kibana --ignore-not-found=true --grace-period=10

          echo "Setup EFK on GKE cluster"
          kubectl apply -f deployment/efk/elasticsearch-kibana/1-elastic-kibana-namespace.yaml,deployment/efk/elasticsearch-kibana/2-elastic-demo.yaml,deployment/efk/elasticsearch-kibana/3-kibana-demo.yaml
          kubectl get all -n elastic-kibana


          echo "Delete existing FluentD Setup"
          kubectl delete namespace fluentd --ignore-not-found=true --grace-period=10

          echo "Setup FluentD on GKE cluster"
          kubectl apply -f deployment/efk/fluentd/1-fluentd-namespace.yaml,deployment/efk/fluentd/2-fluentd-rbac.yaml,deployment/efk/fluentd/3-fluentd-configmap.yaml,deployment/efk/fluentd/4-fluentd.yaml
          kubectl get all -n fluentd

          echo "Delete ISTIO Setup"
          kubectl delete namespace istio-system --ignore-not-found=true --grace-period=10

          echo "Setup ISTIO on GKE cluster"
          curl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.6.8 TARGET_ARCH=x86_64 sh -
          cd istio-1.6.8
          export PATH=$PWD/bin:$PATH
          istioctl install --set profile=demo -y
          kubectl label namespace default istio-injection=enabled --overwrite=true
          kubectl get all -n istio-system

          pwd
          echo "Change the directory back to installation file"
          cd ..
          pwd
          ls -al

          echo "Delete Currency-Service Setup"
          kubectl delete -f deployment/currency-service/currency-conversion,deployment/currency-service/currency-exchange,deployment/efk/fluentd/5-counter.yaml --ignore-not-found=true --grace-period=10
          echo "Setup Currency-Service on GKE cluster"

          kubectl get namespaces
          kubectl apply -f deployment/currency-service/currency-exchange,deployment/currency-service/currency-conversion,deployment/efk/fluentd/5-counter.yaml
          kubectl get services -o wide

          echo "Delete Gateway"
          kubectl delete -f deployment/gateway/istio --ignore-not-found=true --grace-period=10

          echo "Install Istio Gateway"
          kubectl apply -f deployment/gateway/istio
          kubectl get gateway -o wide

